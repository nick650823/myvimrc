set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tomasr/molokai'
Plugin 'Lokaltog/vim-powerline'
Plugin 'vim-scripts/indexer.tar.gz'
Plugin 'vim-scripts/DfrankUtil'
Plugin 'vim-scripts/vimprj'
"Plugin 'SirVer/ultisnips'
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'derekwyatt/vim-protodef'
Plugin 'scrooloose/nerdtree'
Plugin 'fholgado/minibufexpl.vim'
"Plugin 'gcmt/wildfire.vim'
Plugin 'sjl/gundo.vim'
"Plugin 'Lokaltog/vim-easymotion'
"Plugin 'suan/vim-instant-markdown'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'tpope/vim-fugitive'

call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" Molokai
colorscheme molokai
syntax on
set t_Co=256
let g:molokai_original = 1
let g:rehash256 = 1

"set encoding=utf8
"set list listchars=tab:>\ ,trail:$

" PowerLine
set laststatus=2
let g:Powerline_colorscheme='solarized256'

" Gundo
nnoremap <leader>h :GundoToggle<CR>
if has('python3')
	let g:gundo_prefer_python3 = 1
endif

set nu
set cursorline
set shiftwidth=8
set tabstop=8

hi DiffAdd      ctermfg=NONE          ctermbg=Green
hi DiffChange   ctermfg=NONE          ctermbg=NONE
hi DiffDelete   ctermfg=LightBlue     ctermbg=Red
hi DiffText     ctermfg=Yellow        ctermbg=Red

function! Create_cscope_file(execfile)
	exe "! bash" a:execfile a:execfile                                                                  
endfunction
function! Create_cscope_out(cscope_files)
	exe "! cscope -bRq -i" a:cscope_files
endfunction
if has("cscope")
	let cscope_exec=findfile("cscope.sh", ".;")
	if !empty(cscope_exec)
		if cscope_exec ==? "cscope.sh"
			set csre
		endif
		silent call Create_cscope_file(cscope_exec)
		let cscope_files=findfile("cscope.files", ".;")
		if !empty(cscope_files) && filereadable(cscope_files)
			silent call Create_cscope_out(cscope_files)
			let cscope_out=findfile("cscope.out", ".;")
			if !empty(cscope_out) && filereadable(cscope_out)
				silent exe "cs add" cscope_out
			endif
		endif
	endif
endif

set cscopetag
set csto=0

if filereadable("cscope.out")
	cs add cscope.out   
elseif $CSCOPE_DB != ""
	cs add $CSCOPE_DB
endif
set cscopeverbose

nnoremap <F5> :exec 'NERDTreeToggle' <CR>

nmap zs :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap zg :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap zc :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap zt :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap ze :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap zf :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap zi :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap zd :cs find d <C-R>=expand("<cword>")<CR><CR>

if has("autocmd")
    autocmd BufRead *.txt set tw=78
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal g'\"" |
    \ endif
endif
